<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="06621150-c9af-4a8d-b8b6-e73c3aa94e8f" activeEnvironment="Default" name="Default REST" resourceRoot="" soapui-version="5.2.1" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:restMockService id="ffc1d53c-ec36-4e53-bd48-e3f56f667341" port="8080" path="/" host="192.168.1.47" name="Default REST MockService" docroot=""><con:settings/><con:properties/><con:restMockAction name="/api/test" method="GET" resourcePath="/api/test" id="85b605be-d1d5-4a17-8d43-312ea164a8f0"><con:settings/><con:defaultResponse>Success</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Success" id="f0e52c7b-799b-4a0c-8b0a-03ba6669b083" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
	"test_name":"test-case",
	"test_result":"0"
}
</con:responseContent></con:response><con:response name="Failed" id="05739662-4181-4f0e-8d3b-636cc174827d" httpResponseStatus="404" mediaType="application/json"><con:settings/><con:responseContent>{
	"resCode":"1",
	"resMesg":"The test is not found"
}
</con:responseContent></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/></con:soapui-project>